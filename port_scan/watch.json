{
  "metadata": {
    "time_period": "1m",
    "time_window": "30m",
    "sensitivity": 2.0
  },
  "trigger": {
    "schedule": {
      "interval": "1m"
    }
  },
  "input": {
    "search": {
      "request": {
        "indices": "connection",
        "body": {
          "query": {
            "range": {
              "@timestamp": {
                  "gte": "now-{{ctx.metadata.time_window}}"
                }
            }
          },
          "aggs": {
            "source_dest": {
              "terms": {
                "field": "source_dest",
                "size": 100,
                "order": {
                  "unique_ports": "desc"
                }
              },
              "aggs": {
                "series": {
                  "date_histogram": {
                    "field": "@timestamp",
                    "interval": "{{ctx.metadata.time_period}}"
                  },
                  "aggs": {
                    "num_ports": {
                      "cardinality": {
                        "field": "dest_port"
                      }
                    }
                  }
                },
                "port_stats": {
                  "extended_stats_bucket": {
                    "buckets_path": "series>num_ports"
                  }
                },
                "median_ports": {
                  "percentiles_bucket": {
                    "buckets_path": "series>num_ports",
                    "percents": [
                      50.0
                    ]
                  }
                },
                "unique_ports": {
                  "cardinality": {
                    "field": "dest_port"
                  }
                }
              }
            }
          },
          "size": 0
        }
      }
    }
  },
  "throttle_period": "1m",
  "condition": {
    "script": {
      "inline": "def sensitivity = ctx.metadata.sensitivity; if (ctx.payload.aggregations.source_dest.buckets.size() == 0) return false; return ctx.payload.aggregations.source_dest.buckets.stream().anyMatch(p -> p.port_stats.std_deviation > 0 && (p.series.buckets[p.series.buckets.length-1].num_ports.value > ((sensitivity * p.port_stats.std_deviation)+p.median_ports.values['50.0'])));"
    }
  },
  "actions": {
    "log": {
      "transform": {
        "script": {
          "inline":"def sensitivity = ctx.metadata.sensitivity; return ctx.payload.aggregations.source_dest.buckets.stream().filter(p -> p.port_stats.std_deviation > 0 && (p.series.buckets[p.series.buckets.length-1].num_ports.value > ((sensitivity * p.port_stats.std_deviation)+p.median_ports.values['50.0']))).map(p -> p.key.replace('_',' to ')).collect(Collectors.toList());"
        }
      },
      "logging": {
        "text": "Port scan detected:{{#ctx.payload._value}}{{.}}:{{/ctx.payload._value}}"
      }
    },
    "index_payload": {
      "transform": {
        "script": {
          "inline":"def triggered_time = ctx.trigger.triggered_time; def sensitivity = ctx.metadata.sensitivity; return ['_doc':ctx.payload.aggregations.source_dest.buckets.stream().filter(p -> p.port_stats.std_deviation > 0 && (p.series.buckets[p.series.buckets.length-1].num_ports.value > ((sensitivity * p.port_stats.std_deviation)+p.median_ports.values['50.0']))).map(e -> ['@timestamp':triggered_time,'source_dest':e.key,'source':e.key.split('_')[0],'dest':e.key.split('_')[1],'port_count':e.series.buckets[e.series.buckets.length-1].num_ports.value])];"
        }
      },
      "index": {
        "index": "connection-scans",
        "doc_type": "scan"
      }
    }
  }
}